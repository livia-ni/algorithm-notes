k nearest points:

Given a set of points in a cartesian plane, and a start point , find the k closest points to the starting point.
Points = [(1,2),(2,3),(4,6),(7,9)]
Start Point = (2,2)
Find 2 closest points to start point.

determines whether two rectangles overlap given their top-right and bottom-left coordinates:
if(l2.x > r1.x || l1.x > r2.x) return false;
if(l1.y > r2.y || l2.y > r1.y) return false;

http://www.geeksforgeeks.org/find-two-rectangles-overlap/(the points are different)



Given an integer array, return another integer array as output in which each number is replaced by the product of rest of the numbers of the array.

 Eg I/P - [2   1   3   4  5]

 O/P -    [60 120  40  30 24]
 public class Solution {
    public int[] productExceptSelf(int[] nums) {

        if (nums == null || nums.length == 0) return new int[0];
        int len = nums.length;
        int[] rst = new int[len];

        rst[0] = 1;
        for (int i = 1; i < len; i++) {
            rst[i] = rst[i - 1] * nums[i - 1];
        }

        int right = 1;
        for (int i = len - 1; i >= 0; i--) {
            rst[i] *= right;
            right *= nums[i];
        }

        return rst;
    }
}

  //http://www.geeksforgeeks.org/find-maximum-depth-nested-parenthesis-string/
    public static int depthParenthesis(String s){
        if(s.length() == 0)
            return 0;
        int max = 0;
        int max_depth = 0;
        char[] chars = s.toCharArray();
        for(char c : chars){
            if(c == '('){
                max++;
                max_depth = Math.max(max, max_depth);
            }
            if(c == ')'){
                if(max > 0)
                    max--;
                else
                    return -1; //staring with ')'
            }
        }
        //unbalanced, more '('
        if(max > 0)
            return -1;
        return max_depth;
    }

OO Design:
Design a big integer class, optimized for multiplication and addition.
explain of java api: http://www.hollischuang.com/archives/176

Key value store with snapshot


Other:
consistent hashing

