314 Print a Binary Tree in Vertical Order
//level order traversal
static List<List<Integer>> VerticalOrder(Node root){
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        Map<Integer, ArrayList<Integer>> map = new HashMap<>();
        Queue<Node> q = new LinkedList<>();
        Queue<Integer> cols = new LinkedList<>();
        q.add(root);
        cols.add(0);
        int min = 0, max = 0;
        while(!q.isEmpty()){
            Node node = q.poll();
            int col = cols.poll();
            if(!map.containsKey(col)){
                map.put(col, new ArrayList<Integer>());
            }
            map.get(col).add(node.key);
            if(node.left != null){
                q.add(node.left);
                cols.add(col-1);
                min = Math.min(min, col-1);
            }
            if(node.right != null){
                q.add(node.right);
                cols.add(col+1);
                max = Math.max(max, col+1);
            }
        }
        for(int i = min; i <= max; i++){
            res.add(map.get(i));
        }
        //for(List<Integer> list : res){
          //  System.out.println(list);
        //}
        return res;
    }
