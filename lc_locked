314 Print a Binary Tree in Vertical Order
//level order traversal
static List<List<Integer>> VerticalOrder(Node root){
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        Map<Integer, ArrayList<Integer>> map = new HashMap<>();
        Queue<Node> q = new LinkedList<>();
        Queue<Integer> cols = new LinkedList<>();
        q.add(root);
        cols.add(0);
        int min = 0, max = 0;
        while(!q.isEmpty()){
            Node node = q.poll();
            int col = cols.poll();
            if(!map.containsKey(col)){
                map.put(col, new ArrayList<Integer>());
            }
            map.get(col).add(node.key);
            if(node.left != null){
                q.add(node.left);
                cols.add(col-1);
                min = Math.min(min, col-1);
            }
            if(node.right != null){
                q.add(node.right);
                cols.add(col+1);
                max = Math.max(max, col+1);
            }
        }
        for(int i = min; i <= max; i++){
            res.add(map.get(i));
        }
        //for(List<Integer> list : res){
          //  System.out.println(list);
        //}
        return res;
    }
    
    
   339. Nested List Weight Sum
   /**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    // Recursive
    class Solution {
    int sum = 0;
    public int depthSum(List<NestedInteger> nestedList) {
        return helper(nestedList, 1);
    }
    
    public int helper(List<NestedInteger> nestedList, int depth){
        for(NestedInteger n: nestedList){
            if(n.isInteger()){
                //System.out.println(n.getInteger() + " " + depth);
                sum += n.getInteger() * depth;
            }
            else{
                helper(n.getList(), depth+1);
            }
        }
        return sum;
    }
}
    
    
    
    public int depthSum(List<NestedInteger> nestedList) {
        if(nestedList == null || nestedList.size() == 0)
            return 0;
        return helper(nestedList, 1);
    }
    
    private int helper(List<NestedInteger> list, int level) {
        if(list == null)
            return 0;

        int sum = 0;
        for(NestedInteger n : list) {
            if(n.isInteger())
                sum = sum + n.getInteger() * level;
            else
                sum = sum + helper(n.getList(), level + 1);
        }
        
        return sum;
    }
    
    // Iterative
    public int depthSum(List<NestedInteger> nestedList) {
        Queue<NestedInteger> queue = new LinkedList<>();
        
        for(int i = 0; i < nestedList.size(); i++)
            queue.offer(nestedList.get(i));
        
        int level = 0;
        int sum = 0;
        while(!queue.isEmpty()) {
            level++;
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                NestedInteger curr = queue.poll();
                
                if(curr.isInteger())
                    sum = sum + curr.getInteger() * level;
                else {
                    List<NestedInteger> list = curr.getList();
                    
                    for(NestedInteger item : list)
                        queue.offer(item);                    
                }
            }
        }

        return sum;
    }
    
    
    
    public int depthSum(List<NestedInteger> nestedList) {
    if(nestedList == null){
        return 0;
    }
    
    int sum = 0;
    int level = 1;
    
    Queue<NestedInteger> queue = new LinkedList<NestedInteger>(nestedList);
    while(queue.size() > 0){
        int size = queue.size();
        
        for(int i = 0; i < size; i++){
            NestedInteger ni = queue.poll();
            
            if(ni.isInteger()){
                sum += ni.getInteger() * level;
            }else{
                queue.addAll(ni.getList());
            }
        }
        
        level++;
    }
    
    return sum;
}
}
