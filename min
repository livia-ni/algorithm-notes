bit operation for signed and unsigned integer:
signed: <<, >>, 
unsigned: <<<, >>>, 

hashtable vs hashmap:
1. HashMap is non synchronized. It is not-thread safe and can’t be shared between many threads without proper synchronization 
code whereas Hashtable is synchronized. It is thread-safe and can be shared with many threads.
2. HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value.
3. HashMap is generally preferred over HashTable if thread synchronization is not needed

Why HashTable doesn’t allow null and HashMap does?
To successfully store and retrieve objects from a HashTable, the objects used as keys must implement the hashCode method 
and the equals method. Since null is not an object, it can’t implement these methods. 
HashMap is an advanced version and improvement on the Hashtable. HashMap was created later.


string split java:
Using the OR operator:
String delimiters = "\\t|,|;|\\.|\\?|!|-|:|@|\\[|\\]|\\(|\\)|\\{|\\}|_|\\*|/";
Using the character class:
String delimiters = "[-\\t,;.?!:@\\[\\](){}_*/]";

XOR swap: tricky point, if used by two identical numbers, the result will be 0 anyway, use temp may be better in all cases

matrix clockwise: swap diagonal then reverse left to right
       anticlockwise: reverse left to right then swap diagonal

This can avoid integer exceed the largest number:
   mid = lo + (hi - lo) / 2;
   
calculate middle index of an array:
    mid = (nums.length+1)/2 - 1
mid will be the first index of the middle two if nums is even
mid will be exact the middle index if nums is odd

Binary search:
   Distinguish when to use < and <=
   low < high
   low <= high 
   
   in 74. Search a 2D Matrix, 
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0) return false;
        int row = matrix.length;
        int col = matrix[0].length;
        int left = 0, right = row*col-1;
        while(left <= right){
            int mid_idx = left + (right - left) / 2;
            // note this line, remember and understand how to calculate the row and col
            int mid_val = matrix[mid_idx/col][mid_idx%col];  
            if(mid_val == target)
                return true;
            else if(mid_val < target)
                left = mid_idx + 1;
            else
                right = mid_idx - 1;
        }
        return false;
    }
   
  
Java PriorityQueue is implemented as minheap(change the compare() method comparision order to achieve a maxheap)
note: if we want to use PriorityQueue as maxheap, we can reverse the compare object

PriorityQueue<Point> pq = new PriorityQueue<>(
                new Comparator<Point>() {
                    @Override
                    public int compare(Point o1, Point o2) {
                        //though java PriorityQueue is minheap, we can reverse the comparision order to implement a maxheap
                        return distance(o2,orign) - distance(o1,orign);
                    }
                }
        );

C++ PriorityQueue is default implemented as maxheap(std::greater<T> would cause the smallest element to appear as the top().)


Java lambda expression (jdk 1.7 and higher)

LinkedList point:
Remember to use dummyhead point to the real head, 
sometimes the real head will need to be deleted according to the question requirement

if the question contains "duplicate" sequence, remember to try to use HashSet to seek for a solution, but not brute force
(add method will return false if the element already exists)

to get the middle element of an array:
n = array size
if n is even, array[n/2] will get the latter one of two middle elements
if n is odd, array[n/2] will get exactly the middle one

This method is used in Biginteger constructor, need to figure out what's this mean
Java Character.MIN_RADIX = 2 Chracter.MAX_RADIX = 36
Chracter.digit(char ch, int radix)
Returns the numeric value of the character {@code ch} in the specified radix.

Chracter.isDigit(int codePoint)
application: Chracter.isDigit('a') / Chracter.isDigit('12')

given a char[] ch = s.toCharArray();
return new String(ch);  //will return "abdcs"
return Arrays.toString(ch); //will return "[a,b,d,c,s]"

charsequence vs string
https://docs.oracle.com/javase/8/docs/api/
charsequence is an interface, in String contains(CharSequence c), can use a string as the parameter

java TreeMap sort by key
